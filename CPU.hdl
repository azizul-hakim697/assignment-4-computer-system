// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {
    IN  inM[16], instruction[16], reset;
    OUT outM[16], writeM, addressM[15], pc[15];

    PARTS:
    Decode(in=instruction,
           type=type,
           a=a,
           c1=c1,c2=c2,c3=c3,c4=c4,c5=c5,c6=c6,
           d1=d1,d2=d2,d3=d3,
           j1=j1,j2=j2,j3=j3);

    ARegister(in=instruction[0..14], load=aLoadA, out=aOut, out[0..14]=addressM);
    DRegister(in=aluOut, load=d2, out=dOut);

    Mux16(a=aOut, b=inM, sel=a, out=aluY);
    ALU(x=dOut, y=aluY,
        zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6,
        out=aluOut, out=outM, zr=zr, ng=ng);

    And(a=d1, b=type, out=loadAFromC);
    Mux(a=loadAFromC, b=true, sel=Not(type), out=aLoadA);

    Register(in=aluOut, load=loadAFromC, out=aOut);

    Or(a=d3, b=false, out=writeM);

    Jump(ng=ng, zr=zr, j1=j1, j2=j2, j3=j3, out=jump);

    PC(in=aOut, load=jump, inc=true, reset=reset, out[0..14]=pc);
}
