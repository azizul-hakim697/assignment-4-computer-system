// File name: Decode.hdl

/**
 * The instruction decoder determines the type of instruction (a or c)
 * and decodes those instructions.
 * The input in[16] is the instruction to be decoded.
 * The outputs are used as follows:
 *   type:      0 if a-instruction, 1 if c-instruction. 
 *   a:         Determines whether the ALU input uses A (0) or Memory[A] (1)
 *   c1 .. c6:  Op-code wires to ALU
 *   d1 d2 d3:  Destination wires to the load pins of A,D registers and Memory
 *   j1 j2 j3:  Jump wires to Jump Unit
 * For a-instructions, d1 should be 1, all other outputs should be 0
 * For c-instructions, outputs should correspond to their bits in the c-instruction
 */

CHIP Decode {

    IN  in[16];             // instruction to decode

    OUT type,               // Instruction type
        a,                  // ALU A/M
        c1,c2,c3,c4,c5,c6,  // Op-code wires to ALU
        d1,d2,d3,           // Destination wires
        j1,j2,j3;           // Jump wires

 PARTS:
    Or(a=in[15], b=false, out=isC);

    And(a=in[15], b=in[12], out=j1);
    And(a=in[15], b=in[11], out=j2);
    And(a=in[15], b=in[10], out=j3);

    And(a=in[15], b=in[5], out=d1);
    And(a=in[15], b=in[4], out=d2);
    And(a=in[15], b=in[3], out=d3);

    And(a=in[15], b=in[6], out=c1);
    And(a=in[15], b=in[7], out=c2);
    And(a=in[15], b=in[8], out=c3);
    And(a=in[15], b=in[9], out=c4);
    And(a=in[15], b=in[13], out=c5);
    And(a=in[15], b=in[14], out=c6);
    And(a=in[15], b=in[12], out=a);

    Not(in=in[15], out=isA);
    And(a=isA, b=true, out=aInst);
    Or(a=aInst, b=d1, out=d1);
}
